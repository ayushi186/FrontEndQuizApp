{"ast":null,"code":"var _jsxFileName = \"/Users/ayushikarn/Desktop/QuizApp/quizreactapp/src/components/QuestionComp.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport ResultComp from \"./ResultComp\";\nimport styled from \"styled-components\";\nimport patternlight from \"../components/assets/images/pattern-background-desktop-light.svg\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  height: 100vh;\n  border: blue solid 1px;\n  display: flex;\n  background-color: var(--lightblue);\n  background-image: url(${patternlight});\n  background-position: center;\n`;\n_c = Container;\nconst Questiontile = styled.div`\n  flex: 1;\n  margin: 20px;\n  width: 564px;\n  height: 86px;\n  //border: var(--red) solid 1px;\n  border-radius: 5px;\n\n  background-color: var(--verylightblue);\n  pointer: cursor !important;\n`;\n_c2 = Questiontile;\nconst QuestionComp = () => {\n  _s();\n  const {\n    state\n  } = useLocation();\n  const {\n    title,\n    questions\n  } = state;\n  const [questionCount, setQuestionCount] = useState(Object.keys(questions).length);\n  // counter will track the id of the question which must be on the screen.\n  const [counter, setCounter] = useState(0);\n  const [reversecounter, setReverseCounter] = useState(Object.keys(questions).length);\n  const [selectedOption, setSelectedOption] = useState();\n  const actualAnswer = useRef();\n  const [correctAnswer, setCorrectAnswer] = useState();\n  //console.log(\"selectedOption\", selectedOption);\n\n  const answerCheck = () => {\n    console.log(selectedOption);\n    selectedOption === actualAnswer.current ? setCorrectAnswer(true) : setCorrectAnswer(false);\n  };\n  const storeAnswer = e => {\n    debugger;\n    setSelectedOption(e.currentTarget.textContent);\n    if (selectedOption) {\n      console.log(selectedOption);\n    }\n  };\n  if (counter !== reversecounter) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: questions.map((i, idx) => {\n          if (idx === counter) {\n            setActualanswer(i.answer);\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: i.question\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: i.options.map((o, idx) => {\n                  return /*#__PURE__*/_jsxDEV(Questiontile, {\n                    onClick: e => storeAnswer(e),\n                    children: o\n                  }, idx, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 83,\n                    columnNumber: 25\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  answerCheck();\n                },\n                children: \"Submit your answer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 19\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(ResultComp, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 12\n    }, this);\n  }\n};\n_s(QuestionComp, \"zh7kAz7fKGhcege/3TKlTFz9qjU=\", false, function () {\n  return [useLocation];\n});\n_c3 = QuestionComp;\nexport default QuestionComp;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Questiontile\");\n$RefreshReg$(_c3, \"QuestionComp\");","map":{"version":3,"names":["React","useRef","useState","useLocation","ResultComp","styled","patternlight","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","Questiontile","_c2","QuestionComp","_s","state","title","questions","questionCount","setQuestionCount","Object","keys","length","counter","setCounter","reversecounter","setReverseCounter","selectedOption","setSelectedOption","actualAnswer","correctAnswer","setCorrectAnswer","answerCheck","console","log","current","storeAnswer","e","currentTarget","textContent","children","map","i","idx","setActualanswer","answer","question","fileName","_jsxFileName","lineNumber","columnNumber","options","o","onClick","_c3","$RefreshReg$"],"sources":["/Users/ayushikarn/Desktop/QuizApp/quizreactapp/src/components/QuestionComp.tsx"],"sourcesContent":["import React, { SyntheticEvent, useRef, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport ResultComp from \"./ResultComp\";\nimport styled from \"styled-components\";\nimport patternlight from \"../components/assets/images/pattern-background-desktop-light.svg\";\n\ninterface IProps {\n  title: string;\n  icon: string;\n  questions: Array<Tquestions>;\n}\n\ntype Tquestions = {\n  question: string;\n  options: string[];\n  answer: string;\n};\n\nconst Container = styled.div`\n  height: 100vh;\n  border: blue solid 1px;\n  display: flex;\n  background-color: var(--lightblue);\n  background-image: url(${patternlight});\n  background-position: center;\n`;\n\nconst Questiontile = styled.div`\n  flex: 1;\n  margin: 20px;\n  width: 564px;\n  height: 86px;\n  //border: var(--red) solid 1px;\n  border-radius: 5px;\n\n  background-color: var(--verylightblue);\n  pointer: cursor !important;\n`;\nconst QuestionComp = () => {\n  const { state } = useLocation();\n  const { title, questions } = state;\n  const [questionCount, setQuestionCount] = useState(\n    Object.keys(questions).length\n  );\n  // counter will track the id of the question which must be on the screen.\n  const [counter, setCounter] = useState(0);\n  const [reversecounter, setReverseCounter] = useState(\n    Object.keys(questions).length\n  );\n  const [selectedOption, setSelectedOption] = useState<string | null>();\n  const actualAnswer = useRef<string | null>();\n  const [correctAnswer, setCorrectAnswer] = useState<boolean>();\n  //console.log(\"selectedOption\", selectedOption);\n\n  const answerCheck = () => {\n    console.log(selectedOption);\n    selectedOption === actualAnswer.current\n      ? setCorrectAnswer(true)\n      : setCorrectAnswer(false);\n  };\n\n  const storeAnswer = (e: SyntheticEvent) => {\n    debugger;\n    setSelectedOption(e.currentTarget.textContent);\n    if (selectedOption) {\n      console.log(selectedOption);\n    }\n  };\n\n  if (counter !== reversecounter) {\n    return (\n      <>\n        <Container>\n          {questions.map((i: any, idx: number) => {\n            if (idx === counter) {\n              setActualanswer(i.answer);\n              return (\n                <div key={idx}>\n                  <div>{i.question}</div>\n                  <ul>\n                    {i.options.map((o: string, idx: number) => {\n                      return (\n                        <Questiontile\n                          key={idx}\n                          onClick={(e: SyntheticEvent) => storeAnswer(e)}>\n                          {o}\n                        </Questiontile>\n                      );\n                    })}\n                  </ul>\n                  <button\n                    onClick={() => {\n                      answerCheck();\n                    }}>\n                    Submit your answer\n                  </button>\n                </div>\n              );\n            }\n          })}\n        </Container>\n      </>\n    );\n  } else {\n    return <ResultComp />;\n  }\n};\n\nexport default QuestionComp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}