{"ast":null,"code":"var _jsxFileName = \"/Users/ayushikarn/Desktop/QuizApp/quizreactapp/src/components/QuestionComp.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport ResultComp from \"./ResultComp\";\nimport styled from \"styled-components\";\nimport patternlight from \"../components/assets/images/pattern-background-desktop-light.svg\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  height: 100vh;\n  border: blue solid 1px;\n  display: flex;\n  background-color: var(--lightblue);\n  background-image: url(${patternlight});\n  background-position: center;\n`;\n_c = Container;\nconst Questiontile = styled.div`\n  flex: 1;\n  margin: 20px;\n  width: 564px;\n  height: 86px;\n  border: ${props => props.borderColor} solid 1px;\n  border-radius: 5px;\n  background-color: var(--verylightblue);\n  pointer: cursor !important;\n`;\n_c2 = Questiontile;\nconst QuestionComp = () => {\n  _s();\n  const {\n    state\n  } = useLocation();\n  const {\n    title,\n    questions\n  } = state;\n  const [questionCount, setQuestionCount] = useState(Object.keys(questions).length);\n  // counter will track the id of the question which must be on the screen.\n  const [counter, setCounter] = useState(0);\n  const [reversecounter, setReverseCounter] = useState(Object.keys(questions).length);\n  const [selectedOption, setSelectedOption] = useState();\n  const [actualAnswer, setActualAnswers] = useState();\n  const [correctAnswer, setCorrectAnswer] = useState();\n  const [index, setIndex] = useState();\n  //console.log(\"selectedOption\", selectedOption);\n\n  const answerCheck = () => {\n    debugger;\n    console.log(selectedOption);\n    selectedOption === actualAnswer ? setCorrectAnswer(\"green\") : setCorrectAnswer(\"red\");\n  };\n  const storeAnswer = e => {\n    debugger;\n    setSelectedOption(e.currentTarget.textContent);\n    if (selectedOption) {\n      console.log(selectedOption);\n    }\n  };\n  if (counter !== reversecounter) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: questions.map((i, idx) => {\n          if (idx === counter) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: i.question\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: i.options.map((o, idx) => {\n                  return /*#__PURE__*/_jsxDEV(Questiontile, {\n                    borderColor: correctAnswer,\n                    onClick: e => {\n                      setIndex(idx);\n                      setActualAnswers(i.answer);\n                      storeAnswer(e);\n                    },\n                    children: o\n                  }, idx, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 84,\n                    columnNumber: 25\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  answerCheck();\n                },\n                children: \"Submit your answer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 19\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(ResultComp, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 12\n    }, this);\n  }\n};\n_s(QuestionComp, \"g62TSu+pKbIoI8NxX6Cgbpl9L9I=\", false, function () {\n  return [useLocation];\n});\n_c3 = QuestionComp;\nexport default QuestionComp;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Questiontile\");\n$RefreshReg$(_c3, \"QuestionComp\");","map":{"version":3,"names":["React","useState","useLocation","ResultComp","styled","patternlight","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","Questiontile","props","borderColor","_c2","QuestionComp","_s","state","title","questions","questionCount","setQuestionCount","Object","keys","length","counter","setCounter","reversecounter","setReverseCounter","selectedOption","setSelectedOption","actualAnswer","setActualAnswers","correctAnswer","setCorrectAnswer","index","setIndex","answerCheck","console","log","storeAnswer","e","currentTarget","textContent","children","map","i","idx","question","fileName","_jsxFileName","lineNumber","columnNumber","options","o","onClick","answer","_c3","$RefreshReg$"],"sources":["/Users/ayushikarn/Desktop/QuizApp/quizreactapp/src/components/QuestionComp.tsx"],"sourcesContent":["import React, { SyntheticEvent, useRef, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport ResultComp from \"./ResultComp\";\nimport styled from \"styled-components\";\nimport patternlight from \"../components/assets/images/pattern-background-desktop-light.svg\";\n\ninterface IProps {\n  title: string;\n  icon: string;\n  questions: Array<Tquestions>;\n}\n\ntype Tquestions = {\n  question: string;\n  options: string[];\n  answer: string;\n};\n\nconst Container = styled.div`\n  height: 100vh;\n  border: blue solid 1px;\n  display: flex;\n  background-color: var(--lightblue);\n  background-image: url(${patternlight});\n  background-position: center;\n`;\n\nconst Questiontile = styled.div<{ borderColor?: string }>`\n  flex: 1;\n  margin: 20px;\n  width: 564px;\n  height: 86px;\n  border: ${(props) => props.borderColor} solid 1px;\n  border-radius: 5px;\n  background-color: var(--verylightblue);\n  pointer: cursor !important;\n`;\nconst QuestionComp = () => {\n  const { state } = useLocation();\n  const { title, questions } = state;\n  const [questionCount, setQuestionCount] = useState(\n    Object.keys(questions).length\n  );\n  // counter will track the id of the question which must be on the screen.\n  const [counter, setCounter] = useState(0);\n  const [reversecounter, setReverseCounter] = useState(\n    Object.keys(questions).length\n  );\n  const [selectedOption, setSelectedOption] = useState<string | null>();\n  const [actualAnswer, setActualAnswers] = useState<string | null>();\n  const [correctAnswer, setCorrectAnswer] = useState<string>();\n  const [index, setIndex] = useState<number>();\n  //console.log(\"selectedOption\", selectedOption);\n\n  const answerCheck = () => {\n    debugger;\n    console.log(selectedOption);\n    selectedOption === actualAnswer\n      ? setCorrectAnswer(\"green\")\n      : setCorrectAnswer(\"red\");\n  };\n\n  const storeAnswer = (e: SyntheticEvent) => {\n    debugger;\n    setSelectedOption(e.currentTarget.textContent);\n\n    if (selectedOption) {\n      console.log(selectedOption);\n    }\n  };\n\n  if (counter !== reversecounter) {\n    return (\n      <>\n        <Container>\n          {questions.map((i: any, idx: number) => {\n            if (idx === counter) {\n              return (\n                <div key={idx}>\n                  <div>{i.question}</div>\n                  <ul>\n                    {i.options.map((o: string, idx: number) => {\n                      return (\n                        <Questiontile\n                          key={idx}\n                          borderColor={correctAnswer}\n                          onClick={(e: SyntheticEvent) => {\n                            setIndex(idx);\n                            setActualAnswers(i.answer);\n                            storeAnswer(e);\n                          }}>\n                          {o}\n                        </Questiontile>\n                      );\n                    })}\n                  </ul>\n                  <button\n                    onClick={() => {\n                      answerCheck();\n                    }}>\n                    Submit your answer\n                  </button>\n                </div>\n              );\n            }\n          })}\n        </Container>\n      </>\n    );\n  } else {\n    return <ResultComp />;\n  }\n};\n\nexport default QuestionComp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}