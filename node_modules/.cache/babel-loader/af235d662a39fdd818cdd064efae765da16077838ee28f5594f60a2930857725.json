{"ast":null,"code":"var _jsxFileName = \"/Users/ayushikarn/Desktop/QuizApp/quizreactapp/src/components/QuestionComp.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport ResultComp from \"./ResultComp\";\nimport styled from \"styled-components\";\nimport patternlight from \"../components/assets/images/pattern-background-desktop-light.svg\";\nimport { useDispatch } from \"react-redux\";\nimport { trackwronglyansweredquestion } from \"../store/wrongandrightAnsweredReducer\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  height: 100vh;\n  border: blue solid 1px;\n  display: flex;\n  background-color: var(--lightblue);\n  background-image: url(${patternlight});\n  background-position: center;\n`;\n_c = Container;\nconst Questiontile = styled.div`\n  flex: 1;\n  margin: 20px;\n  width: 564px;\n  height: 86px;\n  border: lightgrey solid 5px;\n  border-radius: 5px;\n  background-color: var(--verylightblue);\n  pointer: cursor !important;\n`;\n_c2 = Questiontile;\nconst QuestionComp = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    state\n  } = useLocation();\n  const {\n    title,\n    questions\n  } = state;\n  const [questionCount, setQuestionCount] = useState(Object.keys(questions).length);\n  // counter will track the id of the question which must be on the screen.\n  const [counter, setCounter] = useState(0);\n  const [reversecounter, setReverseCounter] = useState(Object.keys(questions).length);\n  const [selectedOption, setSelectedOption] = useState();\n  const [actualAnswer, setActualAnswers] = useState();\n  const [correctAnswer, setCorrectAnswer] = useState();\n  const [index, setIndex] = useState();\n  const [clickCounter, setClickCounter] = useState(false);\n  //console.log(\"selectedOption\", selectedOption);\n\n  const answerCheck = (counter, i) => {\n    setClickCounter(true);\n    if (selectedOption === actualAnswer) {\n      setCorrectAnswer(\"green\");\n    } else {\n      dispatch(trackwronglyansweredquestion(i));\n      setCorrectAnswer(\"red\");\n    }\n  };\n  const moveToNextQuestion = () => {\n    setClickCounter(false);\n    setCorrectAnswer(\"\");\n    setCounter(counter + 1);\n  };\n  const storeAnswer = e => {\n    setSelectedOption(e.currentTarget.textContent);\n    if (selectedOption) {\n      console.log(selectedOption);\n    }\n  };\n  if (counter !== reversecounter) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: questions.map((i, idx) => {\n          if (idx === counter) {\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: i.question\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: i.options.map((o, idx) => {\n                    const id = `${idx}_${o}`;\n                    return /*#__PURE__*/_jsxDEV(Questiontile, {\n                      style: {\n                        borderColor: index === id ? correctAnswer : \"\"\n                      },\n                      onClick: e => {\n                        setIndex(id);\n                        setActualAnswers(i.answer);\n                        storeAnswer(e);\n                        console.log(idx);\n                      },\n                      children: o\n                    }, id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 97,\n                      columnNumber: 27\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => {\n                    !clickCounter ? answerCheck(counter, i) : moveToNextQuestion();\n                  },\n                  children: clickCounter ? \"Next Question \" : \" Submit Your Answer\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 21\n                }, this)]\n              }, idx, true, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(ResultComp, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 12\n    }, this);\n  }\n};\n_s(QuestionComp, \"vxtMmwflt6U48rKPXXcawch2M+k=\", false, function () {\n  return [useDispatch, useLocation];\n});\n_c3 = QuestionComp;\nexport default QuestionComp;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Questiontile\");\n$RefreshReg$(_c3, \"QuestionComp\");","map":{"version":3,"names":["React","useState","useLocation","ResultComp","styled","patternlight","useDispatch","trackwronglyansweredquestion","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","Questiontile","_c2","QuestionComp","_s","dispatch","state","title","questions","questionCount","setQuestionCount","Object","keys","length","counter","setCounter","reversecounter","setReverseCounter","selectedOption","setSelectedOption","actualAnswer","setActualAnswers","correctAnswer","setCorrectAnswer","index","setIndex","clickCounter","setClickCounter","answerCheck","i","moveToNextQuestion","storeAnswer","e","currentTarget","textContent","console","log","children","map","idx","fileName","_jsxFileName","lineNumber","columnNumber","question","options","o","id","style","borderColor","onClick","answer","_c3","$RefreshReg$"],"sources":["/Users/ayushikarn/Desktop/QuizApp/quizreactapp/src/components/QuestionComp.tsx"],"sourcesContent":["import React, { SyntheticEvent, useRef, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport ResultComp from \"./ResultComp\";\nimport styled from \"styled-components\";\nimport patternlight from \"../components/assets/images/pattern-background-desktop-light.svg\";\nimport { useDispatch } from \"react-redux\";\nimport { trackwronglyansweredquestion } from \"../store/wrongandrightAnsweredReducer\";\n\ninterface IProps {\n  title: string;\n  icon: string;\n  questions: Array<Tquestions>;\n}\n\nexport type Tquestions = {\n  question: string;\n  options: string[];\n  answer: string;\n};\n\nconst Container = styled.div`\n  height: 100vh;\n  border: blue solid 1px;\n  display: flex;\n  background-color: var(--lightblue);\n  background-image: url(${patternlight});\n  background-position: center;\n`;\n\nconst Questiontile = styled.div<{ borderColor?: string; idx?: number }>`\n  flex: 1;\n  margin: 20px;\n  width: 564px;\n  height: 86px;\n  border: lightgrey solid 5px;\n  border-radius: 5px;\n  background-color: var(--verylightblue);\n  pointer: cursor !important;\n`;\nconst QuestionComp = () => {\n  const dispatch = useDispatch();\n  const { state } = useLocation();\n  const { title, questions } = state;\n  const [questionCount, setQuestionCount] = useState(\n    Object.keys(questions).length\n  );\n  // counter will track the id of the question which must be on the screen.\n  const [counter, setCounter] = useState(0);\n  const [reversecounter, setReverseCounter] = useState(\n    Object.keys(questions).length\n  );\n  const [selectedOption, setSelectedOption] = useState<string | null>();\n  const [actualAnswer, setActualAnswers] = useState<string | null>();\n  const [correctAnswer, setCorrectAnswer] = useState<string>();\n  const [index, setIndex] = useState<string>();\n  const [clickCounter, setClickCounter] = useState<boolean>(false);\n  //console.log(\"selectedOption\", selectedOption);\n\n  const answerCheck = (counter: number, i: any) => {\n    setClickCounter(true);\n    if (selectedOption === actualAnswer) {\n      setCorrectAnswer(\"green\");\n    } else {\n      dispatch(trackwronglyansweredquestion(i));\n      setCorrectAnswer(\"red\");\n    }\n  };\n  const moveToNextQuestion = () => {\n    setClickCounter(false);\n    setCorrectAnswer(\"\");\n    setCounter(counter + 1);\n  };\n\n  const storeAnswer = (e: SyntheticEvent) => {\n    setSelectedOption(e.currentTarget.textContent);\n\n    if (selectedOption) {\n      console.log(selectedOption);\n    }\n  };\n\n  if (counter !== reversecounter) {\n    return (\n      <>\n        <Container>\n          {questions.map((i: any, idx: number) => {\n            if (idx === counter) {\n              return (\n                <>\n                  <div></div>\n                  <div key={idx}>\n                    <div>{i.question}</div>\n                    <ul>\n                      {i.options.map((o: string, idx: number) => {\n                        const id = `${idx}_${o}`;\n                        return (\n                          <Questiontile\n                            style={{\n                              borderColor: index === id ? correctAnswer : \"\",\n                            }}\n                            key={id}\n                            onClick={(e: SyntheticEvent) => {\n                              setIndex(id);\n                              setActualAnswers(i.answer);\n                              storeAnswer(e);\n                              console.log(idx);\n                            }}>\n                            {o}\n                          </Questiontile>\n                        );\n                      })}\n                    </ul>\n                    <button\n                      onClick={() => {\n                        !clickCounter\n                          ? answerCheck(counter, i)\n                          : moveToNextQuestion();\n                      }}>\n                      {clickCounter ? \"Next Question \" : \" Submit Your Answer\"}\n                    </button>\n                  </div>\n                </>\n              );\n            }\n          })}\n        </Container>\n      </>\n    );\n  } else {\n    return <ResultComp />;\n  }\n};\n\nexport default QuestionComp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}